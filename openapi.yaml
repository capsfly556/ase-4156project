---
openapi: 3.0.0
info:
  title: GroupGrub
  version: 1.0.0
  description: API for managing group food orders.
servers:
  - url: https://api.groupgrub.com
    description: Production server
paths:
  /groups:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
          description: Successfully retrieved a list of all groups in the service.
        "404":
          description: No groups found in the service.
      summary: Retrieve a list of all groups in the service.
    post:
      requestBody:
        description: "Group object to add, must specify group name, participant IDs,\
          \ groupOrder IDs, and administrator ID."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "201":
          description: Successfully added a new group.
        "400":
          description: Failed to add a new group.
      summary: Add a new group to the service.
  /groups/{groupId}:
    get:
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group details retrieved successfully.
        "404":
          description: Group not found.
      summary: Retrieve details of a specific group.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Group updated successfully.
        "404":
          description: Group not found.
      summary: Update a group's details.
    delete:
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Group deleted successfully.
        "404":
          description: Group not found.
      summary: Delete a group.
  /groups/{groupId}/orders:
    get:
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupOrderResponse'
          description: List of group orders retrieved successfully.
      summary: Retrieve all group orders for a specific group.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupOrder'
        required: true
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
      responses:
        "201":
          description: Group order created successfully.
      summary: Create a new group order.
  /groups/{groupId}/orders/{orderId}:
    get:
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
        - name: orderId
          description: The unique identifier of the order.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupOrderResponse'
          description: Group order details retrieved successfully.
        "404":
          description: Group order not found.
      summary: Retrieve details of a specific group order.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupOrder'
        required: true
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
        - name: orderId
          description: The unique identifier of the order.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Group order updated successfully.
        "400":
          description: Failed to update the group order.
      summary: Update a group order.
    delete:
      parameters:
        - name: groupId
          description: The unique identifier of the group.
          schema:
            type: string
          in: path
          required: true
        - name: orderId
          description: The unique identifier of the order.
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Group order deleted successfully.
        "404":
          description: Group order not found.
      summary: Delete a group order.
  /foodproviders:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodProvider'
          description: Successfully retrieved food providers.
        "404":
          description: No food providers found.
      summary: Retrieve a list of all food providers.
    post:
      requestBody:
        description: A new food provider object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodProvider'
        required: true
      responses:
        "201":
          description: Food provider added successfully.
        "400":
          description: Failed to add food provider.
      summary: Add a new food provider to the service.
  /foodproviders/{foodProviderId}:
    get:
      parameters:
        - name: foodProviderId
          description: The unique identifier of the food provider.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodProvider'
          description: Food provider details retrieved successfully.
        "404":
          description: Food provider not found.
      summary: Retrieve details of a specific food provider.
    put:
      requestBody:
        description: Updated food provider object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodProvider'
        required: true
      parameters:
        - name: foodProviderId
          description: The unique identifier of the food provider.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Food provider updated successfully.
        "400":
          description: Failed to update food provider.
        "404":
          description: Food provider not found.
      summary: Update a food provider's details.
    delete:
      parameters:
        - name: foodProviderId
          description: The unique identifier of the food provider.
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Food provider deleted successfully.
        "404":
          description: Food provider not found.
      summary: Delete a food provider.
  /participants:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
          description: Successfully retrieved participants.
        "404":
          description: No participants found.
      summary: Retrieve all participants registered in the service.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
        required: true
      responses:
        "201":
          description: Participants added successfully.
        "400":
          description: Failed to add participants.
      summary: Add new participants.
  /participants/{participantID}:
    get:
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
          description: Participant details retrieved successfully.
        "404":
          description: Participant not found.
      summary: Retrieve details of a participant by participantID.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
        required: true
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Participant updated successfully.
        "400":
          description: Failed to update participant.
        "404":
          description: Participant not found.
      summary: Update a participant's details.
    delete:
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Participant deleted successfully.
        "404":
          description: Participant not found.
      summary: Delete a participant.
  /participants/{participantID}/orders/{participantOrderID}:
    get:
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
        - name: participantOrderID
          description: The unique identifier of the participant's order.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantOrder'
          description: Participant's order retrieved successfully.
        "404":
          description: Order not found.
      summary: Retrieve a specific participant's order.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantOrder'
        required: true
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
        - name: participantOrderID
          description: The unique identifier of the participant's order.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Order updated successfully.
        "400":
          description: Failed to update order.
        "404":
          description: Order not found.
      summary: Update a participant's order.
    delete:
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
        - name: participantOrderID
          description: The unique identifier of the participant's order.
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Order deleted successfully.
        "404":
          description: Order not found.
      summary: Delete a participant's order.
  /participants/{participantID}/orders:
    get:
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParticipantOrder'
          description: List of participant orders retrieved successfully.
      summary: Retrieve all participant orders for a specific participant.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantOrder'
        required: true
      parameters:
        - name: participantID
          description: The unique identifier of the participant.
          schema:
            type: string
          in: path
          required: true
      responses:
        "201":
          description: Participant order created successfully.
      summary: Create a new participant order.
components:
  schemas:
    Group:
      type: object
      properties:
        groupID:
          format: uuid
          type: string
        name:
          type: string
        participantIDs:
          type: array
          items:
            format: uuid
            type: string
        groupOrderIDs:
          type: array
          items:
            format: uuid
            type: string
        administratorID:
          format: uuid
          type: string
    GroupOrder:
      type: object
      properties:
        groupOrderID:
          format: uuid
          type: string
        status:
          type: string
        menuItemIDs:
          type: object
          additionalProperties:
            type: integer
        participantOrderIDs:
          type: array
          items:
            format: uuid
            type: string
        desiredPickupTimeframe:
          type: string
        foodProviderID:
          format: uuid
          type: string
    GroupOrderResponse:
      allOf:
        - $ref: '#/components/schemas/GroupOrder'
        - type: object
          properties:
            participantOrders:
              type: array
              items:
                $ref: '#/components/schemas/ParticipantOrder'
    Participant:
      type: object
      properties:
        participantID:
          format: uuid
          type: string
        name:
          type: string
        participantOrderIDs:
          type: array
          items:
            format: uuid
            type: string
    ParticipantOrder:
      type: object
      properties:
        participantOrderID:
          format: uuid
          type: string
        menuItemIDs:
          type: object
          additionalProperties:
            type: integer
        comments:
          type: string
    FoodProvider:
      type: object
      properties:
        foodProviderID:
          format: uuid
          type: string
        name:
          type: string
        location:
          type: string
        phoneNumber:
          type: string
        hoursOfOperation:
          type: string
        menu:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
    MenuItem:
      type: object
      properties:
        menuItemID:
          format: uuid
          type: string
        name:
          type: string
        image:
          type: string
        description:
          type: string
        cost:
          type: number
